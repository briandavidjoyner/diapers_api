'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var _ = require('lodash');  /* jshint ignore:line */
var FormList = require('./v1/form').FormList;
var ServiceList = require('./v1/service').ServiceList;
var Version = require('../../base/Version');  /* jshint ignore:line */


/* jshint ignore:start */
/**
 * Initialize the V1 version of Authy
 *
<<<<<<< HEAD
<<<<<<< HEAD
 * @property {Twilio.Authy.V1.ServiceList} services - services resource
 * @property {Twilio.Authy.V1.FormList} forms - forms resource
=======
 * @property {Twilio.Authy.V1.FormList} forms - forms resource
 * @property {Twilio.Authy.V1.ServiceList} services - services resource
>>>>>>> QA
=======
 * @property {Twilio.Authy.V1.ServiceList} services - services resource
 * @property {Twilio.Authy.V1.FormList} forms - forms resource
>>>>>>> QA
 *
 * @param {Twilio.Authy} domain - The twilio domain
 */
/* jshint ignore:end */
function V1(domain) {
  Version.prototype.constructor.call(this, domain, 'v1');

  // Resources
<<<<<<< HEAD
<<<<<<< HEAD
  this._services = undefined;
  this._forms = undefined;
=======
  this._forms = undefined;
  this._services = undefined;
>>>>>>> QA
=======
  this._services = undefined;
  this._forms = undefined;
>>>>>>> QA
}

_.extend(V1.prototype, Version.prototype);
V1.prototype.constructor = V1;

Object.defineProperty(V1.prototype,
<<<<<<< HEAD
<<<<<<< HEAD
  'services', {
  get: function() {
    this._services = this._services || new ServiceList(this);
    return this._services;
=======
  'forms', {
  get: function() {
    this._forms = this._forms || new FormList(this);
    return this._forms;
>>>>>>> QA
=======
  'services', {
  get: function() {
    this._services = this._services || new ServiceList(this);
    return this._services;
>>>>>>> QA
  }
});

Object.defineProperty(V1.prototype,
<<<<<<< HEAD
<<<<<<< HEAD
  'forms', {
  get: function() {
    this._forms = this._forms || new FormList(this);
    return this._forms;
=======
  'services', {
  get: function() {
    this._services = this._services || new ServiceList(this);
    return this._services;
>>>>>>> QA
=======
  'forms', {
  get: function() {
    this._forms = this._forms || new FormList(this);
    return this._forms;
>>>>>>> QA
  }
});

module.exports = V1;
